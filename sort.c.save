/*OS6611
  Assignment 1 Q2
  Xiaowen Li*/

/* SORT command is used to sort a file, arranging the records in a particular order. By default, the
sort command sorts file assuming the contents are ASCII. Using options in the sort command can
also be used to sort numerically.*/

/*options:
  -r: Sorting in reverse order
  -o: Write the output to a new file 
  -n: To sort a file numerically */

#include "types.h"
#include "stat.h"
#include "user.h"

#include "fcntl.h"/*required for write to file*/

#define SIZE 1024

char buf[SIZE];
char minStr[SIZE];
char temp[SIZE];


int strcompare(char *str1,char *str2){

    int cmp =-1;
    int i;
    if(strcmp(str1,str2) == 0) return 0;
    for(i = 0; i < strlen(str1); i++){
        int a = (int) str1[i];
        int b = (int) str2[i];  
        //int n = 0;
        if(a-b == 32 || b-a == 32){
            if(cmp == -1)
                cmp = a < b ? 1 : -1; //str2 : str1;
        }
        else if (a-b != 0){
            if(a>=65 && a<97) a = a + 32;
            if(b>=65 && b<97) b = b + 32;
            cmp = b < a ? 1 : -1; //str2 : str1;
            break;
        }
    }
    return cmp;
}
       
void sortStrings(char *arr[], int n){
    int i, j, min_idx;
    for (i = 0; i < n-1; i++){
        min_idx = i;
        strcpy(minStr, arr[i]);
        for (j = i+1; j < n; j++){
            //if (strcmp(minStr, arr[j]) > 0)
            if (strcompare(minStr, arr[j]) > 0){
                strcpy(minStr, arr[j]);
                min_idx = j;
            }
        }

        if (min_idx != i){
          strcpy(temp, arr[i]);
          strcpy(arr[i], arr[min_idx]);
          strcpy(arr[min_idx], temp);
        }
    }
}

int ft_atoi(char *str){
    int i = 0;
    int sign = 1;
    int val = 0;

    while (str[i] == '-') {
        sign = -sign;
        i++;
    }
    while(str[i] >= '0' && str[i] <= '9'){
        int nbr = (int) (str[i] - '0');
        val = (val * 10) + nbr;
        i++;
    }
    return (val * sign);
}

void sortNumbers(char *arr[], int n){
    int i, j;
    char *key;
    for (i = 1; i < n; i++){
        key = arr[i];
        j = i - 1;
        while (j >= 0 && ft_atoi(arr[j]) > ft_atoi(key)){
            arr[j+1] = arr[j];
            j = j-1;
        }
        arr[j+1] = key;
    }
 }


void sort(int inputfd, int outputfd, int roption,int ooption,int noption){
     int i = 0;
    int j = 0;
    int k = 0;
    int n;
    
    char *nums[SIZE];
    char *temp = (char *) malloc(1024*sizeof(char));

    while((n = read(inputfd, buf, sizeof(buf))) > 0){
        for(i=0; i<n; i++){
            if(buf[i] != '\n'){
              temp[j++] = buf[i];
            }
            else{
                nums[k] = temp;
                temp = (char *) malloc(1024*sizeof(char));
                j=0;
                k++;
            }
        }
    }

    if(noption == 1)
        sortNumbers(nums,k);   
    else
        sortStrings(nums,k);

    //normal
    //reverse
    if(roption){ 
        for(i = k-1 ; i >= 0 ; i--){
            if(write(outputfd, nums[i], strlen(nums[i])) != strlen(nums[i])) {
                printf(2, "sort: write error\n");
                exit();
            }
            if(write(outputfd, "\n", 1) != 1) {
                printf(2, "sort: write error\n");
                exit();
            }
        }
    }
    else{
      for(i = 0 ; i < k ; i++){
                if(write(outputfd, nums[i], strlen(nums[i])) != strlen(nums[i])) {
                printf(2, "sort: write error\n");
                exit();
                }
                if(write(outputfd, "\n", 1) != 1) {
                printf(2, "sort: write error\n");
                exit();
                }
            }  
    }
}

int
main(int argc, char *argv[]){
  int fo;
  int fs = 0;
  int r = 0, o = 0, n = 0;

  if(argc <= 1){
    printf(1,"Too less argument.\n");
  }
  if(argc == 2){      
    /*only filename*/ 
    if((fo = open(argv[1], 0)) < 0){
      printf(1, "sort: cannot open %s\n", argv[1]);
      exit();
    }
    sort(fo,fs,r,o,n);
    close(fo);
  }
  if(argc >= 3){
    /*has options*/
    if(argv[1][0] == '-'){
      switch(argv[1][1]){
        case 'r':
          r = 1;
          break;
        case 'o':
          o = 1;
          break;
        case 'n':
          n = 1;
          break;
        default:
          printf(1,"Option not suppoted.\n");
          exit();
      }
    }
    else{
      printf(1,"Two arguments were received, the option must goes front of the filename, the option should start with '-'.\n");
      exit();
    }

    printf(1,"switch o is %d\n", o);

    /*-o*/   
    if(o){
      if((fs = open(argv[2], O_CREATE | O_WRONLY)) < 0){
        printf(1, "cannot open output file %s\n", argv[2]);
        exit();
      }
      if((fo = open(argv[3], 0)) < 0){
        printf(1, "sort: cannot open %s\n", argv[2]);
        exit();
      }
      sort(fo,fs,r,o,n);
      close(fo);
      close(fs);
    }  
    /*not -o*/
    else{
      if((fo = open(argv[2], 0)) < 0){
      printf(1, "sort: cannot open %s\n", argv[2]);
      exit();
    }
    sort(fo,0,r,o,n);
    close(fo);  
    }
  }
    
  exit();
}
